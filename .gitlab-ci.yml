stages:
  - prepare
  - test
  - build
  - deploy

variables:
  COMPOSER_CACHE_DIR: "$CI_PROJECT_DIR/.composer-cache"
  PHP_VERSION: "8.2"
  NODE_VERSION: "18"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .composer-cache/
    - vendor/
    - node_modules/

composer:
  stage: prepare
  image: php:${PHP_VERSION}-cli
  script:
    - apt-get update && apt-get install -y git unzip libzip-dev libpng-dev libjpeg-dev libfreetype6-dev
    - docker-php-ext-install zip pdo_mysql gd
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - composer install --no-interaction --no-progress --prefer-dist
  artifacts:
    paths:
      - vendor/
    expire_in: 1 day

npm:
  stage: prepare
  image: node:${NODE_VERSION}
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - public/build/
      - node_modules/
    expire_in: 1 day

test:
  stage: test
  image: php:${PHP_VERSION}-cli
  dependencies:
    - composer
  script:
    - cp .env.example .env
    - php artisan key:generate
    - php artisan test
  artifacts:
    paths:
      - storage/logs/
    expire_in: 1 day
    when: on_failure

build:
  stage: build
  image: php:${PHP_VERSION}-cli
  dependencies:
    - composer
    - npm
  script:
    - cp .env.example .env
    - php artisan key:generate
    - php artisan config:cache
    - php artisan route:cache
    - php artisan view:cache
    - php artisan storage:link
  artifacts:
    paths:
      - public/
      - vendor/
      - bootstrap/
      - storage/
      - .env
    expire_in: 1 day

deploy_dev:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Déploiement sur environnement de développement terminé !"
  environment:
    name: development
    url: https://dev.example.com
  only:
    - develop
  when: manual

deploy_prod:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Déploiement sur environnement de production terminé !"
  environment:
    name: production
    url: https://example.com
  only:
    - main
  when: manual
